/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.by.typer.gui;

/**
 *
 * @author owner
 */
public class HelpFrame extends javax.swing.JFrame {

    /**
     * Creates new form HelpFrame
     */
    public HelpFrame() {
        initComponents();
        setSize(500, 300);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Help");
        setResizable(false);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Add new entry", "Edit existing entry", "Delete an entry", "Where is my data saved?", "There are too many hotkeys!", "What is the 'Meta' key?", "Why is it not typing?", "Special Functions" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        selectionChanged();
    }//GEN-LAST:event_jList1ValueChanged

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (jList1.locationToIndex(evt.getPoint()) >= 0) {
            jList1.setSelectedIndex(jList1.locationToIndex(evt.getPoint()));
            selectionChanged();
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void selectionChanged() {
        String s = "";
        int i = jList1.getSelectedIndex();
        if (i == 0) { // new item
            s = "To create a new entry, simply right click "
                    + "\nanywhere in the main window (or double "
                    + "\nclick if you don't have a right mouse "
                    + "\nbutton) to bring up the entry menu."
                    + "\n\nChoose the 'new' option.";
        }
        if (i == 1) { // edit item
            s = "To edit an existing entry, right click "
                    + "\non the entry you wish to edit (or double "
                    + "\nclick if you don't have a right mouse "
                    + "\nbutton) to bring up the entry menu."
                    + "\n\nChoose the 'edit' option.";
        }
        if (i == 2) { // delete item
            s = "To delete an entry, right click"
                    + "\non the entry you wish to edit (or double "
                    + "\nclick if you don't have a right mouse "
                    + "\nbutton) to bring up the entry menu."
                    + "\n\nChoose the 'delete' option.";
        }
        if (i == 3) { // where is my data saved?
            s = "By default, the data will be saved"
                    + "\nin the same folder that this program"
                    + "\nis running from, in a file titled 'typer.dat'."
                    + "\n\nThis can be overridden by supplying"
                    + "\nthe file location as an argument, or by"
                    + "\nchoosing the 'open file' or 'save as'"
                    + "\nmenu items";
        }
        if (i == 4) { // too many hotkeys
            s = "Fortunately, the hotkey drop down"
                    + "\nmenu listens for key strokes, so"
                    + "\none may simply press the key on the"
                    + "\nkeyboard that they wish to use"
                    + "\nand the menu will automatically find it."
                    + "\n\nShould this approach not work, the"
                    + "\nkeys more commonly found on keyboards"
                    + "\nare closer to the top and can be"
                    + "\nselected manually.";
        }
        if (i == 5) { // meta key
            s = "The meta key refers to the special"
                    + "\nkey that is not always the same on"
                    + "\nthe keyboards of different platforms."
                    + "\n\nThis is commonly the 'Command' key"
                    + "\non macs, or the windows key on PCs.";
        }
        if (i == 6) { // not typing
            s = "Due to the nature of the platform"
                    + "\nhooks, unix based (Linux, Mac OS X)"
                    + "\nsystems may not supply the program with"
                    + "\nthe necessary events after awakening"
                    + "\nfrom sleep mode."
                    + "\n\nThis problem can usually be remedied"
                    + "\nby restarting the computer.";
        }
        if (i == 7) { // special functions
            s = "This program supports some special"
                    + "\nkeys, like enter, tab, and backspace."
                    + "\nThese functions are as follows:"
                    + "\n\n\\n - Enter key"
                    + "\n\\t - Tab key"
                    + "\n\\b - Backspace key"
                    + "\n\\\\ - Backslash";
        }
        jTextArea1.setText(s.toString());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
